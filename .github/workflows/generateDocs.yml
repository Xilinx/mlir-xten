name: Generate Github Pages

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  # Build the LLVM submodule then cache it. Do not rebuild if hit in the
  # cache.
  build-llvm:
    name: Build LLVM
    runs-on: ubuntu-latest
    steps:
      - name: Get Repo
        uses: actions/checkout@v2
        with:
          # Do shallow clone to save clone time.
          fetch-depth: 2
          submodules: "true"

      - name: Get LLVM
        id: clone-llvm
        run: utils/clone-llvm.sh
        shell: bash

      # Extract the LLVM submodule hash for use in the cache key.
      - name: Get LLVM Hash
        id: get-llvm-hash
        run: |
            cd llvm
            echo "::set-output name=hash::$(git rev-parse @:./llvm)"
        shell: bash

      # Try to fetch LLVM from the cache.
      - name: Cache LLVM
        id: cache-llvm
        uses: actions/cache@v2
        with:
          path: llvm
          key: ${{ runner.os }}-llvm-install-${{ steps.get-llvm-hash.outputs.hash }}

      # Build LLVM if we didn't hit in the cache.
      - name: Rebuild and Install LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: utils/build-llvm.sh


    # Installing the results into the cache is an action which is automatically
    # added by the cache action above.

  # --- end of build-llvm job.

  # Build repo and run its tests.
  build-repo:
    name: Generate Docs
    needs: build-llvm
    runs-on: ubuntu-latest
    steps:
      - name: Configure Environment
        run: echo "$GITHUB_WORKSPACE/llvm/install/bin" >> $GITHUB_PATH

      # Clone the repo and its submodules. Do shallow clone to save clone
      # time.
      - name: Get repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
          submodules: "true"

      - name: Install libboost
        run: sudo apt-get install -y libboost-all-dev

      # --------
      # Restore LLVM from cache and build if it's not in there.
      # --------

      - name: Get cmakeModules
        id: clone-cmakeModules
        run: git clone --depth 1 https://github.com/Xilinx/cmakeModules.git
        shell: bash

      - name: Get LLVM
        id: clone-llvm
        run: utils/clone-llvm.sh
        shell: bash
        
      # Extract the LLVM submodule hash for use in the cache key.
      - name: Get LLVM Hash
        id: get-llvm-hash
        run: |
            cd llvm
            echo "::set-output name=hash::$(git rev-parse @:./llvm)"
        shell: bash

      # Try to fetch LLVM from the cache.
      - name: Cache LLVM
        id: cache-llvm
        uses: actions/cache@v2
        with:
          path: llvm
          key: ${{ runner.os }}-llvm-install-${{ steps.get-llvm-hash.outputs.hash }}

      # Build LLVM if we didn't hit in the cache. Even though we build it in
      # the previous job, there is a low chance that it'll have been evicted by
      # the time we get here.
      - name: Rebuild and Install LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: utils/build-llvm.sh

      # --------
      # Build and test repo in both debug and release mode.
      # --------

      # Build the repo test target in release mode to build and test.
      - name: Build Docs
        run: |
          mkdir build_release
          pushd build_release
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DLLVM_ENABLE_ASSERTIONS=OFF \
            -DCMAKE_MODULE_PATH=../cmakeModules \
            -DMLIR_DIR=../llvm/install/lib/cmake/mlir/ \
            -DLLVM_DIR=../llvm/install/lib/cmake/llvm/ \
            -DCMAKE_LINKER=lld \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DLLVM_EXTERNAL_LIT=`pwd`/../llvm/build/bin/llvm-lit
          make docs
          popd
          cp -r docs/* build_release/docs

      - name: Publish to github-pages
        uses: peaceiris/actions-gh-pages@v3.6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build_release/docs
          enable_jekyll: true

