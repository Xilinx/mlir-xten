//===- aten_relu.mlir ------------------------------------------*- MLIR -*-===//
//
// This file is licensed under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// (c) Copyright 2019 Xilinx Inc.
//
//===----------------------------------------------------------------------===//

// RUN: aten-opt %s -aten-op-report | FileCheck %s
//   CHECK-LABEL:  "{{.*}}": {
//   CHECK-NEXT:    "activation_in": 6,
//   CHECK-NEXT:    "activation_out": 6,
//   CHECK-NEXT:    "ops:>": 6,
//   CHECK-NEXT:    "reads": 6,
//   CHECK-NEXT:    "writes": 6

// RUN: aten-opt %s -aten-lowering | FileCheck %s --check-prefix=ATEN
// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py
// ATEN:       module {

// ATEN-LABEL:   func @graph(
// ATEN-SAME:                %[[VAL_0:.*]]: memref<1x2x3xf32>) -> memref<1x2x3xf32> {
// ATEN:           %[[VAL_1:.*]] = call @relu_AtenAcapOp_M1x2x3xF32_M1x2x3xF32(%[[VAL_0]]) : (memref<1x2x3xf32>) -> memref<1x2x3xf32>
// ATEN:           return %[[VAL_1]] : memref<1x2x3xf32>
// ATEN:         }

// ATEN-LABEL:   func private @relu_AtenAcapOp_M1x2x3xF32_M1x2x3xF32(memref<1x2x3xf32>) -> memref<1x2x3xf32>
// ATEN:       }

module {
  func @graph(%arg0: tensor<1x2x3xf32>) -> tensor<1x2x3xf32> {
    %0 = "aten.relu"(%arg0) : (tensor<1x2x3xf32>) -> tensor<1x2x3xf32>
    "func.return"(%0) : (tensor<1x2x3xf32>) -> ()
  }
}

