//===- aten_conv2d_3x3.mlir ------------------------------------*- MLIR -*-===//
//
// This file is licensed under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// (c) Copyright 2019 Xilinx Inc.
//
//===----------------------------------------------------------------------===//

// RUN: aten-opt %s --aten-op-report | FileCheck %s
//   CHECK-LABEL:   "{{.*}}": {
//   CHECK-NEXT:     "activation_in": 32768,
//   CHECK-NEXT:     "activation_out": 65536,
//   CHECK-NEXT:     "ops:+": 65536,
//   CHECK-NEXT:     "ops:MAC": 1179648,
//   CHECK-NEXT:     "parameters_in": 304,
//   CHECK-NEXT:     "reads": 33072,
//   CHECK-NEXT:     "writes": 65536


module attributes {torch.debug_module_name = "conv_2d_3x3"} {
  func @forward(%arg0: !torch.vtensor<[1,2,128,128],f32>) -> !torch.vtensor<[1,16,64,64],f32> {
    %0 = torch.vtensor.literal(dense<[-0.18168506, 0.117024288, -0.0453407913, 0.108256772, -0.192524076, 0.208015069, 0.120597526, 4.634480e-02, 0.110429749, 0.232109711, 0.152729824, -0.1620083, -0.0687236637, -0.0103387684, -0.0768057703, 0.0668546408]> : tensor<16xf32>) : !torch.vtensor<[16],f32>
    %1 = torch.vtensor.literal(dense<"0x45390FBE0018603A520782BD28C4E7BCBE60B93DECD01DBD838D513ECC8230BEC14714BE10D9293CAEDED7BD84433E3D9E57C43DC017833BD8E0903C6B930B3E683CC8BC00DB6EBE100BAEBD0039A63B7CF840BDDA9A20BE56EC38BED2939F3D9C1F243DCDB8EBBD1FB20A3E3836BD3CFF271B3E95CB5A3E358A013E62DD66BE101D20BDC569193EAE6715BE0A83B73D760556BE92F759BEFF732F3EB06E08BE4613FF3DFCCB03BD52670FBEA17FE4BD4018EA3BE4A7023D558BFBBD0F98663E6E0A813DAFDA193E953D023E9A08E83D93AF42BE0EEBDC3D81EB473E2F453BBED94D3F3E82D623BE4F8862BE2AF784BD7E62CA3D5268F73D5281FFBDF059A7BC45BA193E6AA39C3DD9F2F4BD57055F3E507A37BECBCD543E4200F6BDE07C9DBDC8ACA13C16D9A83DB0D5C8BCD4A8523D5082023C1C801FBE01AE073EED78643E22CAC13DEEF2A63DDC4D293D25B64E3EA9836C3ED9BE083E519A4C3E4C7692BD7F5121BE76E400BE18A2EF3C00A8493A168AB43D847C3E3D8CAA4B3D0960FBBDFCD34CBE7A7416BEF88970BECA81C03D972D1E3E0EE735BEB2B6A6BDFC04733D7EB73BBEEA641EBE54FF39BE7EF5853D9D53473E0482443D72AC873D643222BE406F99BC88ACD6BDD30D62BE165AE43DBD05423E1EA19D3D6B3F0A3E0648A43DF49E0D3D7237D23DC03563BD8776653ED45F1E3D9140533E243E1CBE4003643BB679BE3D87E8253EC37A183EB4324EBDD412A1BD925A05BEF20B09BEF47176BD20E617BDB49B2C3D1E762EBEC09A903B7E1D85BD2ACA0EBEF6219ABDC393653EFD06053E94414B3DF708223EB2C2963D289B64BD102E323CC265E33DA037E9BC3B3F17BEF2C0A93D9B34F4BD18E8F83C427AF13D7AD092BDD3C2123E9682D43DF4E127BD50CED6BD039C593E64E994BD562962BE80EEF63A07CDF9BD69BD51BE3D6F653EAD86523ED4CC373D04A64A3D9868BF3CDF2B4B3E13526FBEEA80FD3D01E7293E8EB3883DCF6566BE7C703DBEC01D5E3CF40D13BDA327543EE378323E6F2A693E2ACDA7BD51AD633E4F3A4B3E0F0C3E3E62C522BE505593BC5F4C623EF039323C80C2583B74DE0DBDDF6E643E67CCEEBD78CDF8BDD134003ECB4E2BBED608EC3DFAD3853D0851B9BC1608B53D945578BDF1881D3EC337153EAD7F103E5F5B143EF7A3E7BDD205DF3D71C5563EAAE213BEB4DF81BD78BE45BE56F08B3DD7EB4C3E367367BE92A85EBE388266BE34A00ABE263245BEB8A2F3BC2227D5BD7804BCBCB1175A3EDCC2683D3FF12C3ED1DB033EE090EEBC25F237BEF4702D3D18BAF13CC0DBCC3BBE80B83D34B24FBE1CF9F4BDB05B6CBC10EDD4BD720984BDA06AC4BD960AACBD2C863CBEE448B6BD80D2AEBC90F482BD70182FBDF9B40D3E1CE15B3D23930EBE7EF0B73D50C73C3C01066C3EA3C30D3E00C3E6BD41CB1B3EA8BDD23C1E6528BE501B4C3C6044E1BC61D6343ECAE9923D2010433C54D6263D0CAD583D288862BE60E62D3CBAE3D13D09E7F5BD34CB54BE365BA23D7CDEABBD1C439BBDEC3A29BEB4642EBE508A2E3CB4C1313DE223C83D1A24C03D4F64363E593358BEE1C46F3E8FA41F3ED8DB833CDB6B133EFE46FC3D85C841BEA05449BE"> : tensor<16x2x3x3xf32>) : !torch.vtensor<[16,2,3,3],f32>
    %int2 = torch.constant.int 2
    %int1 = torch.constant.int 1
    %2 = torch.prim.ListConstruct %int2, %int2 : (!torch.int, !torch.int) -> !torch.list<int>
    %3 = torch.prim.ListConstruct %int1, %int1 : (!torch.int, !torch.int) -> !torch.list<int>
    %4 = torch.aten.conv2d %arg0, %1, %0, %2, %3, %3, %int1 : !torch.vtensor<[1,2,128,128],f32>, !torch.vtensor<[16,2,3,3],f32>, !torch.vtensor<[16],f32>, !torch.list<int>, !torch.list<int>, !torch.list<int>, !torch.int -> !torch.vtensor<[1,16,64,64],f32>
    return %4 : !torch.vtensor<[1,16,64,64],f32>
  }
}